[user]
    email = rrobayna@gmail.com 
    name = Rafael Robayna 

[sendemail]
    smtpencryption = tls
    smtpserver = smtp.gmail.com
    smtpuser = rrobayna@gmail.com
    smtpserverport = 587

[apply]
    ignorewhitespace = change
    whitespace = nowarn

[push]
    default = upstream

[color]
    interactive = true
    branch = true
    status = true

[core]
    #pager = less -FiR # -F is necessary but has problems with tmux and regular shells
    #pager = most
    #pager = vimpager
    #pager = more -p

[alias]
    root = rev-parse --show-toplevel
    #cdroot = !cd `git root`

    upstream = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)
    upstream-remote = !git upstream | sed -e 's/\\/.*$//g'

    out = !git fetch `git upstream-remote` && git l `git upstream`..HEAD
    in = pull --dry-run

    co = checkout
    coc = checkout .
    cob = checkout -b
    cobf = "!f() { git brd $1; git cob $1; }; f"
    col = checkout HEAD~1

    ours = checkout --ours
    theirs = checkout --theirs
    aours = "!f() { (git reset $* >/dev/null); git ours $* && git add $*; }; f"
    atheirs = "!f() { (git reset $* >/dev/null); git theirs $* && git add $*; }; f"

    ci = commit
    cia = commit -a
    cam = commit --amend
    cama = commit --amend -a

    cl = clean
    cldf = clean -df

    doh = reset --soft HEAD~1
    res = reset
    resa = reset HEAD
    resh = "!f() { git stash && git reset --hard $@ && git stash apply; }; f"
    reshh = !git stash && git reset --hard HEAD && git stash apply
    cundo = reset HEAD^1
    cundoh = !git stash && git reset HEAD^1 --hard && git stash apply
    unstage = reset HEAD

    tags = tag -l

    s = show --color
    sf = show --color --name-only

    d = diff --color
    dw = diff --color -w
    ds = diff --color --staged
    dsf = diff --color --staged --name-only
    df = diff --color --name-only
    dc = "!f() { HASH=$1; shift 1; git d --cc $HASH $HASH^1 $HASH^2 $@; }; f"

    f = fetch
    fa = fetch --all
    fo = fetch origin

    m = merge
    unm = reset --merge

    ps = push
    psu = push -u
    psf = push -f
    psuf = push -uf
    pso = push origin
    pssm = push --recurse-submodules=on-demand
    psremoveallbranches = "!f() { git push $1 `git brar $1 | grep -v master | xargs -I {} echo :{}`; }; f"

    pl = pull
    plo = pull origin
    plom = pull origin master
    plr = pull --rebase

    st = status

    unmerged = !git ls-files --unmerged | cut -f2 | uniq
    untracked = ls-files --other --exclude-standard
    staged = ls-files --staged
    modified = ls-files --modified
    deleted = ls-files --deleted
    gitignored = ls-files -o -i --exclude-standard
    sig = !git ls-files -v | grep "^[[:lower:]]"

    ig = update-index --assume-unchanged
    uig = update-index --no-assume-unchanged
    ignore = update-index --assume-unchanged
    ignored = !git sig

    gitignore-untracked = !git gitignore `git untracked`
    ig-untracked = !git ignore `git untracked`
    gitignore = !cd `git root` && touch .gitignore

    lp = log -m --simplify-merges --color -p
    lf = log -m --simplify-merges --color -p --name-only
    lnom = log --color --no-merges
    lg = log -m --simplify-merges --color --graph --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
    lg2 = !source ~/.githelpers && pretty_git_log
    lgp = !git lg -p
    lgf = !git lg -p --name-only
    l = log -m --simplify-merges --color --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
    lc = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"

    head = !git l -1
    h = !git head
    hp = !source ~/.githelpers && show_git_head
    r = !git l -20
    ra = !git r --all

    pg = diff
    pgs = diff --staged
    pa = apply

    sh = stash
    sha = stash apply
    shl = stash list
    shc = stash clear

    chp = cherry-pick
    chpc = cherry-pick --continue
    chpq = cherry-pick --quit
    chpa = cherry-pick --abort

    a = add --all
    ap = add -p
    resolve-unmerged = !git add `git unmerged`
    add-untracked = !git add `git untracked`
    as = !git diff -w --no-color | git apply --cached
    rs = !(git resa && git as && git co . && git resa) &>/dev/null

    am3 = am -3
    amr = am --resolved
    amc = am --continue
    ama = am --abort
    ams = am --skip

    fm = format-patch

    rmf = rm -rf

    rb = rebase
    rbi = rebase -i
    rbc = rebase --continue
    rba = rebase --abort
    rbs = rebase --skip

    mt = mergetool

    vm = !vim `git unmerged`
    vmo = !vim `git modified`
    vt = !vim `git untracked`
    vim-unmerged = !git vm # deprecated

    current = rev-parse --abbrev-ref HEAD
    br = branch
    brt = branch --track
    brup = branch --set-upstream
    bra = !git branch -a | less -FiRS
    brar = "!f() { git bra | grep remotes/$1/ | cut -f 3 -d '/'; }; f"
    brd = branch -D
    brc = branch --contains
    brcommits = "!f() { git lc --branches=$1* }; f"
    brdiff = !source ~/.githelpers && diff_branches
    brfdiff = !source ~/.githelpers && diff_branches_show_files

    rem = remote
    rema = remote add
    remr = remote rm
    remv = remote -v
    remotes = remote -v

    sm = submodule
    smst = submodule --status
    sma = submodule add
    smu = submodule update
    smui = submodule update --init
    smuir = submodule update --init --recursive
    sms = submodule sync

    bl = blame

    gcp = gc --prune=now
    gca = gc --aggressive
    gcap = gc --aggressive --prune=now

    # git change-commits GIT_COMMITTER_NAME "old name" "new name"
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ $`echo $VAR` = \\\"$OLD\\\" ]]; then export $VAR=\\\"$NEW\\\"; fi\" $@; }; f"
    # from https://help.github.com/articles/remove-sensitive-data
    remove-file = "!f() { git filter-branch -f --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; f"

    rf = reflog
    rfe = reflog expire --expire=now --all

    pr = prune
    prm = !git rfe && git gcp

    fsize = git ls-tree -r -t -l --full-name HEAD | sort -rn -k 4 | less
